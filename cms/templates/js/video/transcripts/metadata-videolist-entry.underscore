<div class="wrapper-comp-setting metadata-videolist-enum">
  <label class="label setting-label" for="<%= uniqueId %>"><%= model.get('display_name')%></label>
  <div class="wrapper-videolist-settings">
    <div class="wrapper-videolist-url videolist-settings-item">
       <input type="text" id="<%= uniqueId %>"  class="input videolist-url" >
    </div>
  

  <div class="row" style="margin-top: 20px;">
        <div class="col-md-12">
           <div id="container">
              <a class="btn btn-default btn-lg " id="pickfiles" href="#" >
                <i class="glyphicon glyphicon-plus"></i>
                <span>选择文件</span>
              </a>
           </div>
        </div>
        <div style="display:none" id="success" class="col-md-12">
            <div class="alert-success">
              文件上传完成
            </div>
        </div>
        <div class="col-md-12 ">
          <table class="table table-striped table-hover text-left"   style="margin-top:40px;display:none">
            <thead>
              <tr>
              <th class="col-md-4">Filename</th>
              <th class="col-md-2">Size</th>
              <th class="col-md-6">Detail</th>
              </tr>
            </thead>
            <tbody id="fsUploadProgress">
            </tbody>
          </table>
        </div>
  </div>


  <div class="tip videolist-url-tip setting-help"><%= model.get('help') %></div>
</div>
<div class="transcripts-status is-invisible">
    <label class="label setting-label transcripts-label"><%= gettext("Default Timed Transcript") %></label>
    <div class="wrapper-transcripts-message"></div>
</div>
<script>
    //引入Plupload 、qiniu.js后
            var uploader = Qiniu.uploader({
                runtimes: 'html5,flash,html4',    //上传模式,依次退化
                browse_button: 'pickfiles',       //上传选择的点选按钮，**必需**
                uptoken_url: '/token/',            //Ajax请求upToken的Url，**强烈建议设置**（服务端提供）
                //uptoken : 'TNryzbrrYvEgQJG46lttCc4Gpl_wx-t1ULH2QMs6:O84bjpPIT9XD_uNsb5GvWprm7X0=:eyJzY29wZSI6InpoaXNoaWdhbmciLCJkZWFkbGluZSI6MTQ2MTg2MjM3OH0=', //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成
                unique_names: true, // 默认 false，key为文件名。若开启该选项，SDK为自动生成上传成功后的key（文件名）。
                // save_key: true,   // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK会忽略对key的处理
                domain: 'http://7xsgez.media1.z0.glb.clouddn.com/',   //bucket 域名，下载资源时用到，**必需**
                get_new_uptoken: false,  //设置上传文件的时候是否每次都重新获取新的token
                container: 'container',           //上传区域DOM ID，默认是browser_button的父元素，
                max_file_size: '1024mb',           //最大文件体积限制
                flash_swf_url: 'http://http://101.201.73.75:8888/static/js/Moxie.swf',  //引入flash,相对路径
                max_retries: 3,                   //上传失败最大重试次数
                dragdrop: true,                   //开启可拖曳上传
                drop_element: 'container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
                chunk_size: '4mb',                //分块上传时，每片的体积
                auto_start: true,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
                init: {
                    'FilesAdded': function(up, files) {
            $('table').show();
            $('#success').hide();
            plupload.each(files, function(file) {
              var progress = new FileProgress(file, 'fsUploadProgress');
              progress.setStatus("等待...");
              progress.bindUploadCancel(up);
            });
                    },
                    'BeforeUpload': function(up, file) {
                           // 每个文件上传前,处理相关的事情
               var progress = new FileProgress(file, 'fsUploadProgress');
            var chunk_size = plupload.parseSize(this.getOption('chunk_size'));
            progress.setProgress(file.percent + "%", file.speed, chunk_size);
                    },
                    'UploadProgress': function(up, file) {
                           var progress = new FileProgress(file, 'fsUploadProgress');
              var chunk_size = plupload.parseSize(this.getOption('chunk_size'));
              progress.setProgress(file.percent + "%", file.speed, chunk_size);
              progress.setProgress(file.percent + "%", file.speed, chunk_size);
                    },
                    'FileUploaded': function(up, file, info) {
                           // 每个文件上传成功后,处理相关的事情
                           // 其中 info 是文件上传成功后，服务端返回的json，形式如
                           // {
                           //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
                           //    "key": "gogopher.jpg"
                           //  }
                           // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
               var progress = new FileProgress(file, 'fsUploadProgress');
              progress.setComplete(up, info);
                           var domain = up.getOption('domain');
                          var res = Qiniu.parseJSON(info);
                           var sourceLink = domain + res.key; //获取上传成功后的文件的Url
              // alert(sourceLink);
			  $('input.videolist-url').val(sourceLink).trigger('input');
               
                    },
                    'Error': function(up, err, errTip) {
                           //上传出错时,处理相关的事情
               alert(errTip);
               $('table').show();
              var progress = new FileProgress(err.file, 'fsUploadProgress');
              progress.setError();
              progress.setStatus(errTip);
                    },
                    'UploadComplete': function() {
                           //队列文件处理完毕后,处理相关的事情
               $('#success').show();
		
                    },
                    'Key': function(up, file) {
                        // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
                        // 该配置必须要在 unique_names: false , save_key: false 时才生效

                        var key = "";
                        // do something with key here
                        return key
                    }
                }
            });

            // domain 为七牛空间（bucket)对应的域名，选择某个空间后，可通过"空间设置->基本设置->域名设置"查看获取

            // uploader 为一个plupload对象，继承了所有plupload的方法，参考http://plupload.com/docs
  </script>

