// Generated by CoffeeScript 1.6.1
(function() {
  var MinimaxProblemDisplay, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MinimaxProblemDisplay = (function(_super) {

    __extends(MinimaxProblemDisplay, _super);

    function MinimaxProblemDisplay(state, submission, evaluation, container, submissionField, parameters) {
      this.state = state;
      this.submission = submission;
      this.evaluation = evaluation;
      this.container = container;
      this.submissionField = submissionField;
      this.parameters = parameters != null ? parameters : {};
      MinimaxProblemDisplay.__super__.constructor.call(this, this.state, this.submission, this.evaluation, this.container, this.submissionField, this.parameters);
    }

    MinimaxProblemDisplay.prototype.render = function() {};

    MinimaxProblemDisplay.prototype.createSubmission = function() {
      var id, value, _ref, _results;
      this.newSubmission = {};
      if (this.submission != null) {
        _ref = this.submission;
        _results = [];
        for (id in _ref) {
          value = _ref[id];
          _results.push(this.newSubmission[id] = value);
        }
        return _results;
      }
    };

    MinimaxProblemDisplay.prototype.getCurrentSubmission = function() {
      return this.newSubmission;
    };

    return MinimaxProblemDisplay;

  })(XProblemDisplay);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.TestProblemDisplay = TestProblemDisplay;

}).call(this);
