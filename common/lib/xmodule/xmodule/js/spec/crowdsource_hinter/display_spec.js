// Generated by CoffeeScript 1.6.1
(function() {

  describe('Crowdsourced hinter', function() {
    beforeEach(function() {
      window.update_schematics = function() {};
      jasmine.stubRequests();
      loadFixtures('crowdsource_hinter.html');
      return this.hinter = new Hinter($('#hinter-root'));
    });
    describe('high-level integration tests', function() {
      beforeEach(function() {
        spyOn($, 'postWithPrefix').andCallFake(function() {
          var last_argument, promise, response;
          last_argument = arguments[arguments.length - 1];
          if (typeof last_argument === 'function') {
            response = {
              success: 'incorrect',
              contents: 'mock grader response'
            };
            last_argument(response);
            return promise = {
              always: function(callable) {
                return callable();
              },
              done: function(callable) {
                return callable();
              }
            };
          }
        });
        this.problem = new Problem($('#problem'));
        return this.problem.bind();
      });
      it('knows when a capa problem is graded, using check.', function() {
        this.problem.answers = 'test answer';
        this.problem.check();
        return expect($.postWithPrefix).toHaveBeenCalledWith("" + this.hinter.url + "/get_hint", 'test answer', jasmine.any(Function));
      });
      return it('knows when a capa problem is graded usig check_fd.', function() {
        spyOn($, 'ajaxWithPrefix').andCallFake(function(url, settings) {
          var response;
          response = {
            success: 'incorrect',
            contents: 'mock grader response'
          };
          if (settings) {
            return settings.success(response);
          }
        });
        this.problem.answers = 'test answer';
        this.problem.check_fd();
        return expect($.postWithPrefix).toHaveBeenCalledWith("" + this.hinter.url + "/get_hint", 'test answer', jasmine.any(Function));
      });
    });
    return describe('capture_problem', function() {
      beforeEach(function() {
        return spyOn($, 'postWithPrefix').andReturn(null);
      });
      it('gets hints for an incorrect answer', function() {
        var data;
        data = ['some answers', '<thing class="incorrect">'];
        this.hinter.capture_problem('problem_graded', data, 'fake element');
        return expect($.postWithPrefix).toHaveBeenCalledWith("" + this.hinter.url + "/get_hint", 'some answers', jasmine.any(Function));
      });
      return it('gets feedback for a correct answer', function() {
        var data;
        data = ['some answers', '<thing class="correct">'];
        this.hinter.capture_problem('problem_graded', data, 'fake element');
        return expect($.postWithPrefix).toHaveBeenCalledWith("" + this.hinter.url + "/get_feedback", 'some answers', jasmine.any(Function));
      });
    });
  });

}).call(this);
