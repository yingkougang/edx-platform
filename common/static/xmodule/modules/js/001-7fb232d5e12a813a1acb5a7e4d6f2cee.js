// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  this.Sequence = (function() {

    function Sequence(element) {
      var _this = this;
      this._change_sequential = function(direction, event) {
        return Sequence.prototype._change_sequential.apply(_this, arguments);
      };
      this.previous = function(event) {
        return Sequence.prototype.previous.apply(_this, arguments);
      };
      this.next = function(event) {
        return Sequence.prototype.next.apply(_this, arguments);
      };
      this.goto = function(event) {
        return Sequence.prototype.goto.apply(_this, arguments);
      };
      this.toggleArrows = function() {
        return Sequence.prototype.toggleArrows.apply(_this, arguments);
      };
      this.updateProgress = function() {
        return Sequence.prototype.updateProgress.apply(_this, arguments);
      };
      this.requestToken = $(element).data('request-token');
      this.el = $(element).find('.sequence');
      this.contents = this.$('.seq_contents');
      this.content_container = this.$('#seq_content');
      this.sr_container = this.$('.sr-is-focusable');
      this.num_contents = this.contents.length;
      this.id = this.el.data('id');
      this.ajaxUrl = this.el.data('ajax-url');
      this.base_page_title = " | " + document.title;
      this.initProgress();
      this.bind();
      this.render(parseInt(this.el.data('position')));
    }

    Sequence.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    Sequence.prototype.bind = function() {
      return this.$('#sequence-list a').click(this.goto);
    };

    Sequence.prototype.initProgress = function() {
      return this.progressTable = {};
    };

    Sequence.prototype.updatePageTitle = function() {
      var position_link;
      position_link = this.link_for(this.position);
      if (position_link && position_link.data('page-title')) {
        return document.title = position_link.data('page-title') + this.base_page_title;
      }
    };

    Sequence.prototype.hookUpProgressEvent = function() {
      return $('.problems-wrapper').bind('progressChanged', this.updateProgress);
    };

    Sequence.prototype.mergeProgress = function(p1, p2) {
      var w1, w2;
      if (p1 === "NA") {
        return p2;
      }
      if (p2 === "NA") {
        return p1;
      }
      if (p1 === "done" && p2 === "done") {
        return "done";
      }
      w1 = p1 === "done" || p1 === "in_progress";
      w2 = p2 === "done" || p2 === "in_progress";
      if (w1 || w2) {
        return "in_progress";
      }
      return "none";
    };

    Sequence.prototype.updateProgress = function() {
      var new_progress;
      new_progress = "NA";
      _this = this;
      $('.problems-wrapper').each(function(index) {
        var progress;
        progress = $(this).data('progress_status');
        return new_progress = _this.mergeProgress(progress, new_progress);
      });
      this.progressTable[this.position] = new_progress;
      return this.setProgress(new_progress, this.link_for(this.position));
    };

    Sequence.prototype.setProgress = function(progress, element) {
      element.removeClass('progress-none').removeClass('progress-some').removeClass('progress-done');
      switch (progress) {
        case 'none':
          return element.addClass('progress-none');
        case 'in_progress':
          return element.addClass('progress-some');
        case 'done':
          return element.addClass('progress-done');
      }
    };

    Sequence.prototype.toggleArrows = function() {
      this.$('.sequence-nav-button').unbind('click');
      if (this.contents.length === 0) {
        this.$('.sequence-nav-button.button-previous').addClass('disabled').attr('disabled', true);
        this.$('.sequence-nav-button.button-next').addClass('disabled').attr('disabled', true);
        return;
      }
      if (this.position === 1) {
        this.$('.sequence-nav-button.button-previous').addClass('disabled').attr('disabled', true);
      } else {
        this.$('.sequence-nav-button.button-previous').removeClass('disabled').removeAttr('disabled').click(this.previous);
      }
      if (this.position === this.contents.length) {
        return this.$('.sequence-nav-button.button-next').addClass('disabled').attr('disabled', true);
      } else {
        return this.$('.sequence-nav-button.button-next').removeClass('disabled').removeAttr('disabled').click(this.next);
      }
    };

    Sequence.prototype.render = function(new_position) {
      var current_tab, modx_full_url, sequence_links;
      if (this.position !== new_position) {
        if (this.position !== void 0) {
          this.mark_visited(this.position);
          modx_full_url = "" + this.ajaxUrl + "/goto_position";
          $.postWithPrefix(modx_full_url, {
            position: new_position
          });
        }
        this.el.trigger("sequence:change");
        this.mark_active(new_position);
        current_tab = this.contents.eq(new_position - 1);
        this.content_container.html(current_tab.text()).attr("aria-labelledby", current_tab.attr("aria-labelledby"));
        XBlock.initializeBlocks(this.content_container, this.requestToken);
        window.update_schematics();
        this.position = new_position;
        this.toggleArrows();
        this.hookUpProgressEvent();
        this.updatePageTitle();
        sequence_links = this.content_container.find('a.seqnav');
        sequence_links.click(this.goto);
        return this.sr_container.focus();
      }
    };

    Sequence.prototype.goto = function(event) {
      var alert_template, alert_text, new_position;
      event.preventDefault();
      if ($(event.currentTarget).hasClass('seqnav')) {
        new_position = $(event.currentTarget).attr('href');
      } else {
        new_position = $(event.currentTarget).data('element');
      }
      if ((1 <= new_position) && (new_position <= this.num_contents)) {
        Logger.log("seq_goto", {
          old: this.position,
          "new": new_position,
          id: this.id
        });
        if (window.queuePollerID) {
          window.clearTimeout(window.queuePollerID);
          delete window.queuePollerID;
        }
        return this.render(new_position);
      } else {
        alert_template = gettext("Sequence error! Cannot navigate to %(tab_name)s in the current SequenceModule. Please contact the course staff.");
        alert_text = interpolate(alert_template, {
          tab_name: new_position
        }, true);
        return alert(alert_text);
      }
    };

    Sequence.prototype.next = function(event) {
      return this._change_sequential('seq_next', event);
    };

    Sequence.prototype.previous = function(event) {
      return this._change_sequential('seq_prev', event);
    };

    Sequence.prototype._change_sequential = function(direction, event) {
      var new_position, offset;
      if (direction !== 'seq_prev' && direction !== 'seq_next') {
        return;
      }
      event.preventDefault();
      offset = {
        seq_next: 1,
        seq_prev: -1
      };
      new_position = this.position + offset[direction];
      Logger.log(direction, {
        old: this.position,
        "new": new_position,
        id: this.id
      });
      if ($(event.target).closest('nav[class="sequence-bottom"]').length > 0) {
        $.scrollTo(0, 150);
      }
      return this.render(new_position);
    };

    Sequence.prototype.link_for = function(position) {
      return this.$("#sequence-list a[data-element=" + position + "]");
    };

    Sequence.prototype.mark_visited = function(position) {
      var element;
      element = this.link_for(position);
      return element.removeClass("inactive").removeClass("active").addClass("visited");
    };

    Sequence.prototype.mark_active = function(position) {
      var element;
      element = this.link_for(position);
      return element.removeClass("inactive").removeClass("visited").addClass("active");
    };

    return Sequence;

  })();

}).call(this);
