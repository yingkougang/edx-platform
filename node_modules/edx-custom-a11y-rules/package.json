{
  "name": "edx-custom-a11y-rules",
  "version": "0.1.0",
  "description": "Custom rules for accessibility testing with aXe Core",
  "main": "",
  "scripts": {
    "test": "./node_modules/karma/bin/karma start"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/edx/edx-custom-a11y-rules.git"
  },
  "keywords": [
    "Accessibility",
    "a11y",
    "edX",
    "testing"
  ],
  "author": {
    "name": "edX Accessibility Team"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/edx/edx-custom-a11y-rules/issues"
  },
  "homepage": "https://github.com/edx/edx-custom-a11y-rules#readme",
  "devDependencies": {
    "axe-core": "~1.1.0",
    "jasmine-core": "^2.3.4",
    "jshint": "^2.8.0",
    "karma": "^0.13.10",
    "karma-coverage": "^0.5.2",
    "karma-firefox-launcher": "^0.1.6",
    "karma-jasmine": "^0.3.6",
    "karma-jasmine-html-reporter": "~0.1",
    "karma-jasmine-jquery": "^0.1.1",
    "karma-phantomjs-launcher": "^0.2.1",
    "karma-spec-reporter": "^0.0.20",
    "phantomjs": "^1.9.18"
  },
  "readme": ".. image:: https://travis-ci.org/edx/edx-custom-a11y-rules.svg?branch=master\n    :target: https://travis-ci.org/edx/edx-custom-a11y-rules\n\n\nOverview\n--------\n\nThis package is intended to be used with Bok Choy's `interface to aXe Core accessibility auditing library <http://bok-choy.readthedocs.org/en/latest/api_reference.html#module-bok_choy.a11y.axe_core_ruleset>`_.\n\n``lib/custom_a11y_ruleset.js`` contains some custom edX accessibility rules, written to be compatible with aXe core.\n\nPlease review the  `Bok Choy documentation <http://bok-choy.readthedocs.org/en/latest/api_reference.html#module-bok_choy.a11y.axe_core_ruleset>`_ for details about how to include custom rules\nin a page audit.\n\n\nInstallation\n------------\n\nInstall from github with:\n\n.. code:: bash\n\n    npm install edx/edx-custom-a11y-rules#v0.1.0\n\n\n\nWriting new rules\n-----------------\n\nGetting set up for development\n==============================\n\nMake sure npm is installed, then:\n\n.. code:: bash\n\n    git clone https://github.com/edx/edx-custom-a11y-rules.git\n    cd edx-custom-a11y-rules\n    make develop\n\n\nDevelopment guides\n==================\n\nNew Rules and Checks should be written in ``lib/custom_a11y_rules.js``.\n\n* `aXe Core development guide for Rules <https://github.com/dequelabs/axe-core/blob/master/doc/developer-guide.md#rules>`_\n\n* `aXe Core development guide for Checks <https://github.com/dequelabs/axe-core/blob/master/doc/developer-guide.md#checks>`_\n\n\nTesting guide\n=============\n\nThere are Jasmine tests for checking that the custom rules\nbehave as intended and that they can integrate with aXe Core.\nThese can be run in \"dev\" mode, which keeps the browser up\nfor debugging, or in \"single-run\" mode to run once and exit.\nSee the `Testing checklist`_ below for more details about writing\ntests.\n\nTo run tests for the custom ruleset in \"dev\" mode:\n\n.. code:: bash\n\n    make test-dev\n\n\nTo run tests for the custom ruleset in \"single-run\" mode:\n\n.. code:: bash\n\n    make test\n\n\nAdditionally, to check code quality with JSHint, use:\n\n.. code:: bash\n\n    make quality\n\n\nTesting checklist\n*****************\n\n* Write sample html files with the examples of pass/fail cases in ``test/fixtures/``.  These are the fixtures that will be used for tests.\n\n* If you are writing a Check, add the test cases for your check to ``specCases`` in ``test/spec/checks_spec.js``.\n\n* If you are writing a Rule, add the test cases for your rule to ``specCases`` in ``test/spec/rule_spec.js``.\n\n* If needed, any new integration tests can go in ``test/spec/integration_spec.js``.\n",
  "readmeFilename": "README.rst",
  "_id": "edx-custom-a11y-rules@0.1.0",
  "_shasum": "5e6cda01ebc861d6c593d33e04fb7ed7d64d863d",
  "_resolved": "git+https://github.com/edx/edx-custom-a11y-rules#ff77f203ef5d9534c6200cc141e9d150155d0e12",
  "_from": "edx-custom-a11y-rules@git+https://github.com/edx/edx-custom-a11y-rules"
}
